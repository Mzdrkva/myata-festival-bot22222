import os
import json
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "user_data.json"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω (—Å–ø–ª–æ—à–Ω–æ–π —Å–ø–∏—Å–æ–∫) ======
SCENES = {
    "SIRENA": [
        ("2025-06-13 15:00", "SULA FRAY"),
        ("2025-06-13 16:00", "Luverance"),
        # ... –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ SIRENA ...
    ],
    "TITANA": [
        ("2025-06-13 16:00", "Baby Cute"),
        ("2025-06-13 16:40", "–ü–∞–ª—å—Ü–µ–≤–∞ –≠–∫—Å–ø–∏—Ä–∏–µ–Ω—Å"),
        # ... –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ TITANA ...
    ],
    "–°—Ü–µ–Ω–∞ 3": [], "–°—Ü–µ–Ω–∞ 4": [], "–°—Ü–µ–Ω–∞ 5": [], "–°—Ü–µ–Ω–∞ 6": [], "–°—Ü–µ–Ω–∞ 7": []
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∫–∞–∫–∞—è —Å—Ü–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
user_context = {}

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.row(
    KeyboardButton("SIRENA"),
    KeyboardButton("TITANA"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 3"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 4"),
)
main_kb.row(
    KeyboardButton("–°—Ü–µ–Ω–∞ 5"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 6"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 7"),
    KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∞—Ç
date_kb = ReplyKeyboardMarkup(resize_keyboard=True)
date_kb.row(
    KeyboardButton("13 –∏—é–Ω—è"),
    KeyboardButton("14 –∏—é–Ω—è"),
    KeyboardButton("15 –∏—é–Ω—è"),
)
date_kb.row(KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = (
        "üåø –ú—è—Ç–∞ 2025 ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å, –∞ —Ç—Ä–∏ –¥–Ω—è –º—É–∑—ã–∫–∏, –ø—Ä–∏—Ä–æ–¥—ã –∏ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏. üé∂üî•\n\n"
        "ü§ñ –° —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Äì –≤—ã–±–∏—Ä–∞—Ç—å –ª—é–±–∏–º—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
        "‚Äì —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Ü–µ–Ω–∞–º –∏ –¥–∞—Ç–∞–º\n"
        "‚Äì –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:"
    )
    await message.reply(text, reply_markup=main_kb)

@dp.message_handler(lambda m: m.text in SCENES.keys())
async def choose_scene(message: types.Message):
    scene = message.text
    user_context[message.from_user.id] = scene
    await message.reply(
        f"‚è≥ –í—ã–±—Ä–∞–Ω–∞ —Å—Ü–µ–Ω–∞ {scene}. –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=date_kb
    )

@dp.message_handler(lambda m: m.text in ["13 –∏—é–Ω—è", "14 –∏—é–Ω—è", "15 –∏—é–Ω—è"])
async def choose_date(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_context:
        return await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É.", reply_markup=main_kb)
    scene = user_context[user_id]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–∞—Ç—ã –≤ ISO
    day = message.text.split()[0]
    iso_date = f"2025-06-{int(day):02d}"
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø–æ –¥–∞—Ç–µ
    entries = [
        (t,a) for t,a in SCENES[scene]
        if t.startswith(iso_date)
    ]
    if not entries:
        return await message.reply("–ù–∞ —ç—Ç—É –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.", reply_markup=main_kb)
    kb = InlineKeyboardMarkup(row_width=2)
    for idx, (tstr, artist) in enumerate(entries):
        time_only = tstr[11:16]
        kb.insert(InlineKeyboardButton(time_only, callback_data=f"star|{scene}|{iso_date}|{idx}"))
    await message.reply(f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {scene} –Ω–∞ {message.text}:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user_context.pop(message.from_user.id, None)
    await message.reply("–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data().get(user_id, [])
    if not data:
        return await message.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", reply_markup=main_kb)
    lines = sorted(data, key=lambda e: e["time"])
    text = "üìã –¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n" + "\n".join(
        f"{e['time']} ‚Äî {e['scene']}: {e['artist']}" for e in lines
    )
    await message.reply(text, reply_markup=main_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("star|"))
async def handle_star(callback: types.CallbackQuery):
    _, scene, iso_date, idx_str = callback.data.split("|", 3)
    idx = int(idx_str)
    entries = [(t,a) for t,a in SCENES[scene] if t.startswith(iso_date)]
    time_str, artist = entries[idx]
    user_id = str(callback.from_user.id)
    data = load_data()
    picks = data.get(user_id, [])
    entry = {"scene": scene, "time": time_str, "artist": artist, "notified": False}
    if not any(e["scene"]==scene and e["time"]==time_str for e in picks):
        picks.append(entry)
        data[user_id] = picks
        save_data(data)
        await bot.answer_callback_query(callback.id, f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ: {artist}")
    else:
        await bot.answer_callback_query(callback.id, "‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

# ====== –§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ======
async def reminder_loop():
    while True:
        now = datetime.now()
        data = load_data()
        updated = False
        for uid, picks in data.items():
            for entry in picks:
                if not entry["notified"]:
                    event_time = datetime.fromisoformat(entry["time"])
                    delta = (event_time - now).total_seconds()
                    if 0 < delta <= 15*60:
                        await bot.send_message(
                            chat_id=int(uid),
                            text=(
                                f"üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç: {entry['artist']} "
                                f"({entry['scene']}) –≤ {entry['time'][11:16]}"
                            )
                        )
                        entry["notified"] = True
                        updated = True
        if updated:
            save_data(data)
        await asyncio.sleep(60)

async def on_startup(dp: Dispatcher):
    asyncio.create_task(reminder_loop())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

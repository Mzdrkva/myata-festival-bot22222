import os
import json
import asyncio
from datetime import datetime, time, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# ====== –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ======
MONTH_NAMES = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞",
    4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è",
    10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è",
}

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "user_data.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω ======
SCENES = {
    "SIRENA": [
        ("2025-06-13 15:00", "SULA FRAY"),
        # ‚Ä¶ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Ä¶
        ("2025-06-15 18:00", "The Hatters"),
    ],
    "TITANA": [
        ("2025-06-13 16:00", "Baby Cute"),
        # ‚Ä¶ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Ä¶
        ("2025-06-15 17:20", "Jane air"),
    ],
    "–°—Ü–µ–Ω–∞ 3": [], "–°—Ü–µ–Ω–∞ 4": [],
    "–°—Ü–µ–Ω–∞ 5": [], "–°—Ü–µ–Ω–∞ 6": [], "–°—Ü–µ–Ω–∞ 7": [],
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç (–∫–∞–∫—É—é —Å—Ü–µ–Ω—É –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
user_context = {}

# ====== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ======
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.row("SIRENA", "TITANA", "–°—Ü–µ–Ω–∞ 3", "–°—Ü–µ–Ω–∞ 4")
main_kb.row("–°—Ü–µ–Ω–∞ 5", "–°—Ü–µ–Ω–∞ 6", "–°—Ü–µ–Ω–∞ 7", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")

date_kb = ReplyKeyboardMarkup(resize_keyboard=True)
date_kb.row("13 –∏—é–Ω—è", "14 –∏—é–Ω—è", "15 –∏—é–Ω—è")
date_kb.row("‚óÄÔ∏è –ù–∞–∑–∞–¥")

# ====== –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ (—É—á—ë—Ç ‚Äú–Ω–æ—á–∏‚Äù) ======
def get_entries_for_date(scene: str, iso_date: str):
    date_dt = datetime.fromisoformat(f"{iso_date} 00:00")
    next_dt = date_dt + timedelta(days=1)
    result = []
    for tstr, artist in SCENES[scene]:
        dt = datetime.fromisoformat(tstr)
        # –ª–∏–±–æ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å, –ª–∏–±–æ —Å–ª–µ–¥—É—é—â–∞—è –Ω–æ—á—å –¥–æ 02:00
        if dt.date() == date_dt.date() or (dt.date() == next_dt.date() and dt.time() < time(2, 0)):
            result.append((tstr, artist))
    return result

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = (
        "üåø –ú—è—Ç–∞ 2025 ‚Äî —Ç—Ä–∏ –¥–Ω—è –º—É–∑—ã–∫–∏, –ø—Ä–∏—Ä–æ–¥—ã –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏. üé∂üî•\n\n"
        "ü§ñ –° —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Äì –≤—ã–±–∏—Ä–∞—Ç—å –ª—é–±–∏–º—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
        "‚Äì —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Ü–µ–Ω–∞–º –∏ –¥–∞—Ç–∞–º\n"
        "‚Äì –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:"
    )
    await message.reply(text, reply_markup=main_kb)

@dp.message_handler(lambda m: m.text in SCENES)
async def choose_scene(message: types.Message):
    user_context[message.from_user.id] = message.text
    await message.reply(f"‚è≥ –°—Ü–µ–Ω–∞ {message.text} –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=date_kb)

@dp.message_handler(lambda m: m.text in ["13 –∏—é–Ω—è", "14 –∏—é–Ω—è", "15 –∏—é–Ω—è"])
async def choose_date(message: types.Message):
    scene = user_context.get(message.from_user.id)
    if not scene:
        return await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É.", reply_markup=main_kb)

    day = int(message.text.split()[0])
    iso_date = f"2025-06-{day:02d}"
    entries = get_entries_for_date(scene, iso_date)
    if not entries:
        return await message.reply("–ù–∞ —ç—Ç—É –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.", reply_markup=main_kb)

    kb = InlineKeyboardMarkup(row_width=2)
    for idx, (tstr, artist) in enumerate(entries):
        time_only = tstr[11:16]
        kb.insert(InlineKeyboardButton(
            f"{time_only} ‚Äî {artist}",
            callback_data=f"star|{scene}|{iso_date}|{idx}"
        ))
    await message.reply(f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {scene} –Ω–∞ {message.text}:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user_context.pop(message.from_user.id, None)
    await message.reply("–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: types.Message):
    user_id = str(message.from_user.id)
    picks = load_data().get(user_id, [])
    if not picks:
        return await message.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", reply_markup=main_kb)

    picks_sorted = sorted(picks, key=lambda x: x["time"])
    lines = []
    for e in picks_sorted:
        dt = datetime.fromisoformat(e["time"])
        date_str = f"{dt.day} {MONTH_NAMES[dt.month]}"
        time_str = dt.strftime("%H:%M")
        lines.append(f"{date_str} –≤ {time_str} | {e['scene']} | {e['artist']}")

    await message.reply("üìã –¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n" + "\n".join(lines), reply_markup=main_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("star|"))
async def handle_star(callback: types.CallbackQuery):
    _, scene, iso_date, idx_str = callback.data.split("|", 3)
    idx = int(idx_str)
    entries = get_entries_for_date(scene, iso_date)
    time_str, artist = entries[idx]

    user_id = str(callback.from_user.id)
    data = load_data()
    picks = data.get(user_id, [])
    entry = {"scene": scene, "time": time_str, "artist": artist, "notified": False}
    if not any(x["scene"] == scene and x["time"] == time_str for x in picks):
        picks.append(entry)
        data[user_id] = picks
        save_data(data)
        await bot.answer_callback_query(callback.id, f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ: {artist}")
    else:
        await bot.answer_callback_query(callback.id, "‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

# ====== –§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ======
async def reminder_loop():
    while True:
        now = datetime.now()
        data = load_data()
        updated = False
        for uid, picks in data.items():
            for entry in picks:
                if not entry["notified"]:
                    event_time = datetime.fromisoformat(entry["time"])
                    delta = (event_time - now).total_seconds()
                    if 0 < delta <= 15*60:
                        await bot.send_message(
                            chat_id=int(uid),
                            text=(f"üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç: {entry['artist']} "
                                  f"({entry['scene']}) –≤ {entry['time'][11:16]}")
                        )
                        entry["notified"] = True
                        updated = True
        if updated:
            save_data(data)
        await asyncio.sleep(60)

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ webhooks –∏ pending updates
    loop = asyncio.get_event_loop()
    loop.run_until_complete(bot.delete_webhook(drop_pending_updates=True))

    # –°—Ç–∞—Ä—Ç polling —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º webhook
    executor.start_polling(
        dp,
        skip_updates=True,
        reset_webhook=True,
        on_startup=lambda _dp: asyncio.create_task(reminder_loop())
    )

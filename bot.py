import os
import json
import asyncio
from datetime import datetime, time, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# ====== –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ ======
MONTH_NAMES = {
    1: "—è–Ω–≤–∞—Ä—è",   2: "—Ñ–µ–≤—Ä–∞–ª—è",  3: "–º–∞—Ä—Ç–∞",
    4: "–∞–ø—Ä–µ–ª—è",   5: "–º–∞—è",      6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è",     8: "–∞–≤–≥—É—Å—Ç–∞",  9: "—Å–µ–Ω—Ç—è–±—Ä—è",
    10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è",  12: "–¥–µ–∫–∞–±—Ä—è",
}

# ====== –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö ======
SCENES_FILE = "scenes.json"
FAVS_FILE   = "user_data.json"

# ====== –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ü–µ–Ω ======
DEFAULT_SCENES = {
    "SIRENA": [
        ("2025-06-13 15:00", "SULA FRAY"),
        ("2025-06-13 16:00", "Luverance"),
        ("2025-06-13 17:00", "–ì–£–î–¢–ê–ô–ú–°"),
        ("2025-06-13 18:00", "Polnalyubvi"),
        ("2025-06-13 19:00", "–ó–∞—Ç–æ—á–∫–∞"),
        ("2025-06-13 20:00", "TMNV"),
        ("2025-06-13 21:00", "–•–õ–ï–ë"),
        ("2025-06-13 22:40", "–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è"),
        ("2025-06-14 13:00", "The Translators"),
        ("2025-06-14 14:00", "PALC"),
        ("2025-06-14 15:00", "Beautiful boys"),
        ("2025-06-14 16:00", "3333"),
        ("2025-06-14 17:00", "–î—Ä–∞–≥–Ω–∏"),
        ("2025-06-14 18:00", "–ö–∏—Ä–ø–∏—á–∏ Big Band"),
        ("2025-06-14 19:00", "DRUMMATIX"),
        ("2025-06-14 20:00", "Saluki"),
        ("2025-06-14 21:00", "ZOLOTO"),
        ("2025-06-14 22:40", "–ê–†–ò–Ø"),
        ("2025-06-15 12:00", "–°–º–µ—àBand"),
        ("2025-06-15 13:00", "–ú—É–ª—å—Çf–∏–ª—å–º—ã"),
        ("2025-06-15 14:00", "obraza net"),
        ("2025-06-15 15:00", "–ü—ë—Ç—Ä –ù–∞–ª–∏—á"),
        ("2025-06-15 16:00", "–º—ã—Ç–∏—â–∏ –≤ –æ–≥–Ω–µ"),
        ("2025-06-15 17:00", "–ë–∞–∑–∞—Ä"),
        ("2025-06-15 18:00", "The Hatters"),
    ],
    "TITANA": [
        ("2025-06-13 16:00", "Baby Cute"),
        ("2025-06-13 16:40", "–ü–∞–ª—å—Ü–µ–≤–∞ –≠–∫—Å–ø–∏—Ä–∏–µ–Ω—Å"),
        ("2025-06-13 17:40", "–õ—é–¥–º–∏–ª –û–≥—É—Ä—á–µ–Ω–∫–æ"),
        ("2025-06-13 18:40", "–ë—é—Ä–æ"),
        ("2025-06-13 19:40", "OLIGARKH"),
        ("2025-06-13 20:40", "Yan Dilan"),
        ("2025-06-13 21:50", "–ö–æ–Ω–µ—Ü —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π"),
        ("2025-06-14 00:30", "The OM"),
        ("2025-06-14 12:00", "–¢—Ä–∏ –í—Ç–æ—Ä—ã—Ö"),
        ("2025-06-14 12:50", "El Mashe"),
        ("2025-06-14 13:40", "Inna Syberia"),
        ("2025-06-14 14:40", "–û—Å—Ç—ã–ª"),
        ("2025-06-14 15:40", "Manapart"),
        ("2025-06-14 16:40", "Juzeppe Junior"),
        ("2025-06-14 17:40", "–ú–∞–Ω–≥–æ –±—É—Å—Ç"),
        ("2025-06-14 18:40", "–•–º—ã—Ä–æ–≤"),
        ("2025-06-14 19:40", "–°—Ç—Ä–∏–æ"),
        ("2025-06-14 20:40", "–ú–æ–ª–æ–¥–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏"),
        ("2025-06-14 21:50", "–õ–æ–ª–∏—Ç–∞ –∫–æ—Å—Å"),
        ("2025-06-15 00:30", "–ë–æ–Ω–¥ —Å –∫–Ω–æ–ø–∫–æ–π"),
        ("2025-06-15 12:20", "–•–æ—Ö–º–∞"),
        ("2025-06-15 13:20", "Cardio killer"),
        ("2025-06-15 14:20", "–ú–æ–∂–µ–º —Ö—É–∂–µ"),
        ("2025-06-15 15:20", "Breaking system"),
        ("2025-06-15 16:20", "Stigmata"),
        ("2025-06-15 17:20", "Jane air"),
    ]
}

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è JSON ======
def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default.copy()

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ======
SCENES = load_json(SCENES_FILE, DEFAULT_SCENES)
FAVS   = load_json(FAVS_FILE, {})

# ====== –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
user_context = {}

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("FAQ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    return kb

def schedule_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    names = list(SCENES.keys())
    for i in range(0, len(names), 2):
        kb.row(*(KeyboardButton(name) for name in names[i:i+2]))
    kb.row("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

def date_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("13 –∏—é–Ω—è", "14 –∏—é–Ω—è", "15 –∏—é–Ω—è")
    kb.row("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

def faq_kb():
    opts = [
        "–û —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ",
        "–û–±–º–µ–Ω –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –±—Ä–∞—Å–ª–µ—Ç—ã",
        "–ú–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ",
        "–ú–µ—Å—Ç–æ –ø–æ–¥ –ø–∞–ª–∞—Ç–∫—É",
        "–ö–∞—Ä—Ç–∞ –§–µ—Å—Ç–∏–≤–∞–ª—è",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥—É—à–µ–≤—ã—Ö",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–æ–Ω —Å –∫–∏–ø—è—Ç–∫–æ–º",
        "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫"
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(opts), 2):
        kb.row(*(KeyboardButton(o) for o in opts[i:i+2]))
    kb.row("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

# ====== –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ ======
def get_entries_for_date(scene: str, iso_date: str):
    date_dt = datetime.fromisoformat(f"{iso_date} 00:00")
    next_dt = date_dt + timedelta(days=1)
    result = []
    for tstr, artist in SCENES.get(scene, []):
        dt = datetime.fromisoformat(tstr)
        if dt.date() == date_dt.date() or (dt.date() == next_dt.date() and dt.time() < time(2,0)):
            result.append((tstr, artist))
    return result

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    welcome = (
        "üåø –ú—è—Ç–∞ 2025 ‚Äî —Ç—Ä–∏ –¥–Ω—è –º—É–∑—ã–∫–∏, –ø—Ä–∏—Ä–æ–¥—ã –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏. üé∂üî•\n\n"
        "ü§ñ –° —ç—Ç–∏–º –±–æ—Ç–æ–º —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚Äì –≤—ã–±–∏—Ä–∞—Ç—å –ª—é–±–∏–º—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
        "‚Äì —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Ü–µ–Ω–∞–º –∏ –¥–∞—Ç–∞–º\n"
        "‚Äì –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞\n"
        "‚Äì –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
    )
    await msg.reply(welcome, reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "FAQ")
async def cmd_faq(msg: types.Message):
    await msg.reply("‚ùì FAQ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=faq_kb())

@dp.message_handler(lambda m: m.text in [
    "–û —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ",
    "–û–±–º–µ–Ω –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –±—Ä–∞—Å–ª–µ—Ç—ã",
    "–ú–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ",
    "–ú–µ—Å—Ç–æ –ø–æ–¥ –ø–∞–ª–∞—Ç–∫—É",
    "–ö–∞—Ä—Ç–∞ –§–µ—Å—Ç–∏–≤–∞–ª—è",
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥—É—à–µ–≤—ã—Ö",
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–æ–Ω —Å –∫–∏–ø—è—Ç–∫–æ–º",
    "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã",
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫"
])
async def handle_faq(msg: types.Message):
    if msg.text == "–û —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ":
        text = (
            "–§–µ—Å—Ç–∏–≤–∞–ª—å ¬´–î–∏–∫–∞—è –ú—è—Ç–∞¬ª ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –æ–ø–µ–Ω-—ç–π—Ä.\n"
            "–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –ó–∞–µ–∑–¥ ‚Äî —Å 18:00 12 –∏—é–Ω—è, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ‚Äî 13-15 –∏—é–Ω—è.\n"
            "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ø–æ—Å–µ–ª–æ–∫ –ë—É–Ω—ã—Ä–µ–≤–æ.\n\n"
            "–í 2025 –≥–æ–¥—É –∑—Ä–∏—Ç–µ–ª–µ–π –Ω–∞ 7 —Å—Ü–µ–Ω–∞—Ö –∂–¥–µ—Ç –±–æ–ª–µ–µ 120 –∫–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –∏ dj-—Å–µ—Ç–æ–≤. "
            "–†–æ–∫, –∏–Ω–¥–∏, —Ñ–æ–ª–∫, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, —Ñ–∞–Ω–∫, –¥–∂–∞–∑, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚Äî –º—É–ª—å—Ç–∏—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è ¬´–î–∏–∫–∞—è –ú—è—Ç–∞¬ª "
            "–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤.\n\n"
            "–ù–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ –≤—ã—Å—Ç—É–ø—è—Ç THE HATTERS, –¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è, ZOLOTO, –ê–†–ò–Ø, –•–õ–ï–ë, SALUKI, polnalyubvi, "
            "DRUMMATIX, –ó–∞—Ç–æ—á–∫–∞, –ë–ê–ó–ê–†, Jane Air, TMNV, –ü—ë—Ç—Ä –ù–∞–ª–∏—á, –ì–£–î–¢–ê–ô–ú–°, –ë–æ–Ω–¥ —Å –∫–Ω–æ–ø–∫–æ–π, –°–º–µ—àBand, "
            "Luverance, –ö–∏—Ä–ø–∏—á–∏ Big Band, The OM, MONOLYT (IL), Stigmata, –º—ã—Ç–∏—â–∏ –≤ –æ–≥–Ω–µ, PALC, OLIGARKH, "
            "–ú—É–ª—å—Çf–∏–ª—å–º—ã, –î—Ä–∞–≥–Ω–∏, Beautiful boys, —Ö–º—ã—Ä–æ–≤, Manapart, –ö–æ–Ω–µ—Ü —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π, "
            "–öamilla Robertovna, CARDIO KILLER, Sula fray, obraza net, 3333, –°–æ–±–∞—á–∏–π Lie, –•–û–•–ú–ê, "
            "The Translators, –ú–∞–Ω–≥–æ –ë—É—Å—Ç, Yan Dilan, –ë—é—Ä–æ, –ú–û–õ–û–î–û–°–¢–¨ –í–ù–£–¢–†–ò, –ü–∞–ª—å—Ü–µ–≤–∞ –≠–∫—Å–ø–∏—Ä–∏–µ–Ω—Å, "
            "–õ—é–¥–º–∏–ª –û–≥—É—Ä—á–µ–Ω–∫–æ, Breaking System, Brodsky, uncle pecos, –°—Ç—Ä–∏–æ, —Å–æ–Ω—è —Ö–æ—á–µ—Ç —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å, "
            "Juzeppe Junior, –õ–æ–ª–∏—Ç–∞ –ö–æ—Å—Å, –û—Å—Ç—ã–ª, Melekess, El Mashe, –î–µ–¥–æ–≤—Å–∫–∏–π –°–≤–∏—Ç–µ—Ä, Baby Cute, "
            "–ê–Ω—Ç–æ–Ω –ü—Ä–æ–∫–æ—Ñ—å–µ–≤, Breakpillzz, –ú–∞–º–∞ –Ω–µ —É–∑–Ω–∞–µ—Ç, GOKK‚ÄôN‚ÄôTONY, –ú–æ–∂–µ–º —Ö—É–∂–µ, RASPUTNIKI (KZ), "
            "Inna Syberia, –±–µ–∑ –æ–±–∏–¥, –î–∞–≤–∞–π, LITHIUM, –ö–∞—Å–ø–∏–π, –¢—Ä–∏ –≤—Ç–æ—Ä—ã—Ö, –†—É–±–µ–∂ –í–µ–∫–æ–≤, —Å–∏–Ω–¥—Ä–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è, "
            "Koledova, —è –°–æ—Ñ–∞, Mazzltoff, ielele, Polina Offline, –ù–∏–∫ –ë—Ä—É—Å–∫–æ–≤—Å–∫–∏–π, ROFMAN, –ª–µ—Ç—è–≥–∞, "
            "Tabasco Band, –ì–Ω–µ–≤ –ì–æ—Å–ø–æ–¥–µ–Ω—å, –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –±–µ–∑–±–æ–ª—å–Ω–æ–π –±–∏—Ç—ã, Hideout, –°–∞–≤–µ–ªi—á—ä –ë—ç–Ω–¥, ParadigmA, "
            "–ö–ª—É–± 33 –∏ –¥—Ä—É–≥–∏–µ, –Ω–æ–≤—ã–µ –∞–Ω–æ–Ω—Å—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é!\n\n"
            "¬´–î–∏–∫–∞—è –ú—è—Ç–∞¬ª –ø–æ –ø—Ä–∞–≤—É —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º—ã–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –æ–ø–µ–Ω-—ç–π—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞, "
            "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞ –∏ –¥—É—à–µ–≤—ã–µ —Å –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π, –¥–æ—Ä–æ–∂–∫–∏, –≤—ã–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–æ—Ç—É–∞—Ä–Ω–æ–π –ø–ª–∏—Ç–∫–æ–π, "
            "–æ—Å–≤–µ—â–µ–Ω–Ω—ã–µ –ø–∞–ª–∞—Ç–æ—á–Ω—ã–µ –∫–µ–º–ø–∏–Ω–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–º–µ—á–µ–Ω—ã –Ω–∞ —É–ª–∏—Ü—ã –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–¥ –ø–∞–ª–∞—Ç–∫–∏, "
            "–∫–æ–º–Ω–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏ –∏ —Ä–µ–±–µ–Ω–∫–∞, –±–∞—Å—Å–µ–π–Ω, –≤–∏–¥–æ–≤–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ –∞—Ä—Ç-–∞–º–±–∞—Ä, sup-—Å—Ç–∞–Ω—Ü–∏—è –∏ –ª–∞—É–Ω–¥–∂-–∑–æ–Ω—ã.\n\n"
            "–§—É–¥–∫–æ—Ä—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫—É—Ö–Ω–∏ –º–∏—Ä–∞ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å –∏ –∫–æ—à–µ–ª–µ–∫, –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫—É—é –∑–æ–Ω—É –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é "
            "–ø–µ—Ä–≥–æ–ª—É —Å –±–ª—é–¥–∞–º–∏ –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–æ–≤.\n\n"
            "–¢–∞–∫–∂–µ –¥–ª—è –≥–æ—Å—Ç–µ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π:\n"
            "‚Äî –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ Green Age –ø—Ä–æ—Ö–æ–¥—è—Ç –π–æ–≥–∞-–ø—Ä–∞–∫—Ç–∏–∫–∏, —ç–∫—Å—Ç–∞—Ç–∏–∫ –¥—ç–Ω—Å, –∞—Ä—Ç-–º–µ–¥–∏—Ç–∞—Ü–∏–∏, "
            "–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –Ω–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–µ –∏ –ª–µ–∫—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.\n"
            "‚Äî –í –±—å—é—Ç–∏-–∑–æ–Ω–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —è—Ä–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑, –∑–¥–µ—Å—å —Ä–∞–±–æ—Ç–∞—é—Ç –º–∞—Å—Ç–µ—Ä–∞ –±—Ä–µ–π–¥–∏–Ω–≥–∞ "
            "–∏ –º–∞–∫–∏—è–∂–∞, –æ—Ç–∫—Ä—ã—Ç –±–∞—Ä–±–µ—Ä—à–æ–ø.\n"
            "‚Äî –ì–æ—Å—Ç–∏ —Å –¥–µ—Ç—å–º–∏ –æ—Å–æ–±–æ —Ü–µ–Ω—è—Ç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –¥–µ—Ç—Å—Ç–≤–∞, –≥–¥–µ –µ—Å—Ç—å –î–µ—Ç—Å–∫–∞—è —Å—Ü–µ–Ω–∞ ¬´–ê—Ä–∏—ç–ª—å¬ª, —Ä–∞–±–æ—Ç–∞—é—Ç "
            "–∫–∞—Ä—É—Å–µ–ª–∏ –∏ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –æ—Ç–∫—Ä—ã—Ç –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ —Å –æ–ø—ã—Ç–Ω—ã–º–∏ "
            "–∞–Ω–∏–º–∞—Ç–æ—Ä–∞–º–∏, –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏–º–µ—Ç —É—á–∞—Å—Ç–∏–µ —Å—Ç—É–¥–∏—è –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ ¬´–ú–µ–ª—å–Ω–∏—Ü–∞¬ª ‚Äî –ø—Ä–∏–µ–¥—É—Ç –ª—é–±–∏–º—ã–µ "
            "–º—É–ª—å—Ç–≥–µ—Ä–æ–∏ –õ—É–Ω—Ç–∏–∫, –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã –∏ –¢—Ä–∏ –±–æ–≥–∞—Ç—ã—Ä—è.\n"
            "‚Äî –ë–æ–ª—å—à–∞—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—å–Ω–∞—è —è—Ä–º–∞—Ä–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Ö—ç–Ω–¥–º–µ–π–¥–∞, –∞–≤—Ç–æ—Ä—Å–∫–æ–π –æ–¥–µ–∂–¥—ã, –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ "
            "–∏ —É–∫—Ä–∞—à–µ–Ω–∏–π —Å–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω—ã.\n"
            "‚Äî –ù–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ –µ—Å—Ç—å –≤–æ—Ä–∫–∞—É—Ç-–∑–æ–Ω–∞, –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –ø–ª—è–∂–Ω–æ–º—É –≤–æ–ª–µ–π–±–æ–ª—É.\n"
            "‚Äî –ü–∞—Ä—Ç–Ω–µ—Ä—ã —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ –ª–∞—É–Ω–¥–∂-–∑–æ–Ω—ã "
            "–¥–ª—è –æ—Ç–¥—ã—Ö–∞ –≥–æ—Å—Ç–µ–π.\n\n"
            "–§–µ—Å—Ç–∏–≤–∞–ª—å ¬´–î–∏–∫–∞—è –ú—è—Ç–∞¬ª ‚Äî –ª–µ—Ç–æ, –º—É–∑—ã–∫–∞ –∏ –ª—é–±–æ–≤—å! –≠—Ç–æ –±—É–¥–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ!"
        )
        await msg.reply(text, reply_markup=faq_kb())
    else:
        await msg.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.", reply_markup=faq_kb())

@dp.message_handler(lambda m: m.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω")
async def cmd_schedule(msg: types.Message):
    await msg.reply("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É:", reply_markup=schedule_menu_kb())

@dp.message_handler(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def cmd_favs(msg: types.Message):
    uid = str(msg.from_user.id)
    picks = FAVS.get(uid, [])
    if not picks:
        return await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", reply_markup=main_menu_kb())
    lines = []
    for e in sorted(picks, key=lambda x: x["time"]):
        dt = datetime.fromisoformat(e["time"])
        date = f"{dt.day} {MONTH_NAMES[dt.month]}"
        tm   = dt.strftime("%H:%M")
        lines.append(f"{date} –≤ {tm} | {e['scene']} | {e['artist']}")
    await msg.reply("üìã –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n" + "\n".join(lines
)), reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text in SCENES)
async def cmd_choose_scene(msg: types.Message):
    user_context[msg.from_user.id] = msg.text
    await msg.reply(f"–°—Ü–µ–Ω–∞ ¬´{msg.text}¬ª –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=date_menu_kb())

@dp.message_handler(lambda m: m.text in ["13 –∏—é–Ω—è","14 –∏—é–Ω—è","15 –∏—é–Ω—è"])
async def cmd_choose_date(msg: types.Message):
    scene = user_context.get(msg.from_user.id)
    if not scene:
        return await msg.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É.", reply_markup=schedule_menu_kb())
    day = int(msg.text.split()[0])
    iso = f"2025-06-{day:02d}"
    entries = get_entries_for_date(scene, iso)
    if not entries:
        return await msg.reply("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.", reply_markup=schedule_menu_kb())
    kb = InlineKeyboardMarkup(row_width=1)
    for idx, (tstr, artist) in enumerate(entries):
        kb.add(InlineKeyboardButton(f"{tstr[11:16]} ‚Äî {artist}",
                   callback_data=f"fav|{scene}|{iso}|{idx}"))
    await msg.reply(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ¬´{scene}¬ª –Ω–∞ {msg.text}:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("fav|"))
async def cb_fav(cq: types.CallbackQuery):
    _, scene, iso, idx = cq.data.split("|", 3)
    idx = int(idx)
    tstr, artist = get_entries_for_date(scene, iso)[idx]
    uid = str(cq.from_user.id)
    FAVS.setdefault(uid, [])
    entry = {"scene": scene, "time": tstr, "artist": artist, "notified": False}
    if not any(x["scene"]==scene and x["time"]==tstr for x in FAVS[uid]):
        FAVS[uid].append(entry)
        save_json(FAVS_FILE, FAVS)
        await bot.answer_callback_query(cq.id, f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ ¬´{artist}¬ª")
    else:
        await bot.answer_callback_query(cq.id, "‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back(msg: types.Message):
    await msg.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@dp.message_handler(commands=['add_scene'])
async def cmd_add_scene(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_scene –ù–∞–∑–≤–∞–Ω–∏–µ_—Å—Ü–µ–Ω—ã")
    name = parts[1].strip()
    if name in SCENES:
        return await msg.reply("–¢–∞–∫–∞—è —Å—Ü–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    SCENES[name] = []
    save_json(SCENES_FILE, SCENES)
    await msg.reply(f"‚úÖ –°—Ü–µ–Ω–∞ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def reminder_loop():
    while True:
        now = datetime.now()
        changed = False
        for uid, picks in FAVS.items():
            for e in picks:
                if not e["notified"]:
                    et = datetime.fromisoformat(e["time"])
                    delta = (et - now).total_seconds()
                    if 0 < delta <= 15*60:
                        await bot.send_message(int(uid),
                            f"üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç: {e['artist']} ({e['scene']}) –≤ {e['time'][11:16]}"
                        )
                        e["notified"] = True
                        changed = True
        if changed:
            save_json(FAVS_FILE, FAVS)
        await asyncio.sleep(60)

async def on_startup(dp: Dispatcher):
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(reminder_loop())

if __name__ == "__main__":
    executor.start_polling(
        dp,
        skip_updates=True,
        reset_webhook=True,
        on_startup=on_startup
    )

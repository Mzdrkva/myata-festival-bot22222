import os
import json
import asyncio
from datetime import datetime, time, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# ====== –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ ======
MONTH_NAMES = {
    1: "—è–Ω–≤–∞—Ä—è",   2: "—Ñ–µ–≤—Ä–∞–ª—è",  3: "–º–∞—Ä—Ç–∞",
    4: "–∞–ø—Ä–µ–ª—è",   5: "–º–∞—è",      6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è",     8: "–∞–≤–≥—É—Å—Ç–∞",  9: "—Å–µ–Ω—Ç—è–±—Ä—è",
    10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è",  12: "–¥–µ–∫–∞–±—Ä—è",
}

# ====== –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö ======
SCENES_FILE = "scenes.json"
FAVS_FILE   = "user_data.json"

# ====== –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ü–µ–Ω ======
DEFAULT_SCENES = {
    "SIRENA": [
        ("2025-06-13 15:00", "SULA FRAY"),
        ("2025-06-13 16:00", "Luverance"),
        ("2025-06-13 17:00", "–ì–£–î–¢–ê–ô–ú–°"),
        ("2025-06-13 18:00", "Polnalyubvi"),
        ("2025-06-13 19:00", "–ó–∞—Ç–æ—á–∫–∞"),
        ("2025-06-13 20:00", "TMNV"),
        ("2025-06-13 21:00", "–•–õ–ï–ë"),
        ("2025-06-13 22:40", "–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è"),
        ("2025-06-14 13:00", "The Translators"),
        ("2025-06-14 14:00", "PALC"),
        ("2025-06-14 15:00", "Beautiful boys"),
        ("2025-06-14 16:00", "3333"),
        ("2025-06-14 17:00", "–î—Ä–∞–≥–Ω–∏"),
        ("2025-06-14 18:00", "–ö–∏—Ä–ø–∏—á–∏ Big Band"),
        ("2025-06-14 19:00", "DRUMMATIX"),
        ("2025-06-14 20:00", "Saluki"),
        ("2025-06-14 21:00", "ZOLOTO"),
        ("2025-06-14 22:40", "–ê–†–ò–Ø"),
        ("2025-06-15 12:00", "–°–º–µ—àBand"),
        ("2025-06-15 13:00", "–ú—É–ª—å—Çf–∏–ª—å–º—ã"),
        ("2025-06-15 14:00", "obraza net"),
        ("2025-06-15 15:00", "–ü—ë—Ç—Ä –ù–∞–ª–∏—á"),
        ("2025-06-15 16:00", "–º—ã—Ç–∏—â–∏ –≤ –æ–≥–Ω–µ"),
        ("2025-06-15 17:00", "–ë–∞–∑–∞—Ä"),
        ("2025-06-15 18:00", "The Hatters"),
    ],
    "TITANA": [
        ("2025-06-13 16:00", "Baby Cute"),
        ("2025-06-13 16:40", "–ü–∞–ª—å—Ü–µ–≤–∞ –≠–∫—Å–ø–∏—Ä–∏–µ–Ω—Å"),
        ("2025-06-13 17:40", "–õ—é–¥–º–∏–ª –û–≥—É—Ä—á–µ–Ω–∫–æ"),
        ("2025-06-13 18:40", "–ë—é—Ä–æ"),
        ("2025-06-13 19:40", "OLIGARKH"),
        ("2025-06-13 20:40", "Yan Dilan"),
        ("2025-06-13 21:50", "–ö–æ–Ω–µ—Ü —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π"),
        ("2025-06-14 00:30", "The OM"),
        ("2025-06-14 12:00", "–¢—Ä–∏ –í—Ç–æ—Ä—ã—Ö"),
        ("2025-06-14 12:50", "El Mashe"),
        ("2025-06-14 13:40", "Inna Syberia"),
        ("2025-06-14 14:40", "–û—Å—Ç—ã–ª"),
        ("2025-06-14 15:40", "Manapart"),
        ("2025-06-14 16:40", "Juzeppe Junior"),
        ("2025-06-14 17:40", "–ú–∞–Ω–≥–æ –±—É—Å—Ç"),
        ("2025-06-14 18:40", "–•–º—ã—Ä–æ–≤"),
        ("2025-06-14 19:40", "–°—Ç—Ä–∏–æ"),
        ("2025-06-14 20:40", "–ú–æ–ª–æ–¥–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏"),
        ("2025-06-14 21:50", "–õ–æ–ª–∏—Ç–∞ –∫–æ—Å—Å"),
        ("2025-06-15 00:30", "–ó–ê–õ–ï–ó"),
        ("2025-06-15 12:20", "–•–æ—Ö–º–∞"),
        ("2025-06-15 13:20", "Cardio killer"),
        ("2025-06-15 14:20", "–ú–æ–∂–µ–º —Ö—É–∂–µ"),
        ("2025-06-15 15:20", "Breaking system"),
        ("2025-06-15 16:20", "Stigmata"),
        ("2025-06-15 17:20", "Jane air"),
    ]
}

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è JSON ======
def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default.copy()

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ======
SCENES = load_json(SCENES_FILE, DEFAULT_SCENES)
FAVS   = load_json(FAVS_FILE, {})

# ====== –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
user_context = {}

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def main_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("FAQ", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
    return kb

def schedule_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    names = list(SCENES.keys())
    for i in range(0, len(names), 2):
        kb.row(*(KeyboardButton(name) for name in names[i:i+2]))
    kb.row("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

def date_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("13 –∏—é–Ω—è", "14 –∏—é–Ω—è", "15 –∏—é–Ω—è")
    kb.row("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

def faq_kb():
    opts = [
        "–û —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ", "–û–±–º–µ–Ω –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –±—Ä–∞—Å–ª–µ—Ç—ã",
        "–ú–µ—Å—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ", "–ú–µ—Å—Ç–æ –ø–æ–¥ –ø–∞–ª–∞—Ç–∫—É",
        "–ö–∞—Ä—Ç–∞ –§–µ—Å—Ç–∏–≤–∞–ª—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥—É—à–µ–≤—ã—Ö",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–æ–Ω —Å –∫–∏–ø—è—Ç–∫–æ–º", "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫"
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(opts), 2):
        kb.row(*(KeyboardButton(o) for o in opts[i:i+2]))
    kb.row("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb

# ====== –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ ======
def get_entries_for_date(scene: str, iso_date: str):
    date_dt = datetime.fromisoformat(f"{iso_date} 00:00")
    next_dt = date_dt + timedelta(days=1)
    result = []
    for tstr, artist in SCENES.get(scene, []):
        dt = datetime.fromisoformat(tstr)
        if dt.date() == date_dt.date() or (dt.date() == next_dt.date() and dt.time() < time(2,0)):
            result.append((tstr, artist))
    return result

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    await msg.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ¬´–ú—è—Ç–∞ 2025¬ª!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_kb()
    )

@dp.message_handler(lambda m: m.text == "FAQ")
async def cmd_faq(msg: types.Message):
    await msg.reply("‚ùì FAQ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=faq_kb())

@dp.message_handler(lambda m: m.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω")
async def cmd_schedule(msg: types.Message):
    await msg.reply("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É:", reply_markup=schedule_menu_kb())

@dp.message_handler(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def cmd_favs(msg: types.Message):
    uid = str(msg.from_user.id)
    picks = FAVS.get(uid, [])
    if not picks:
        return await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", reply_markup=main_menu_kb())
    lines = []
    for e in sorted(picks, key=lambda x: x["time"]):
        dt = datetime.fromisoformat(e["time"])
        date = f"{dt.day} {MONTH_NAMES[dt.month]}"
        tm   = dt.strftime("%H:%M")
        lines.append(f"{date} –≤ {tm} | {e['scene']} | {e['artist']}")
    await msg.reply("üìã –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n" + "\n".join(lines),
                    reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text in SCENES)
async def cmd_choose_scene(msg: types.Message):
    user_context[msg.from_user.id] = msg.text
    await msg.reply(f"–°—Ü–µ–Ω–∞ ¬´{msg.text}¬ª –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                    reply_markup=date_menu_kb())

@dp.message_handler(lambda m: m.text in ["13 –∏—é–Ω—è","14 –∏—é–Ω—è","15 –∏—é–Ω—è"])
async def cmd_choose_date(msg: types.Message):
    scene = user_context.get(msg.from_user.id)
    if not scene:
        return await msg.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω—É.", reply_markup=schedule_menu_kb())
    day = int(msg.text.split()[0])
    iso = f"2025-06-{day:02d}"
    entries = get_entries_for_date(scene, iso)
    if not entries:
        return await msg.reply("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.", reply_markup=schedule_menu_kb())
    kb = InlineKeyboardMarkup(row_width=1)
    for idx, (tstr, artist) in enumerate(entries):
        kb.add(InlineKeyboardButton(f"{tstr[11:16]} ‚Äî {artist}",
                   callback_data=f"fav|{scene}|{iso}|{idx}"))
    await msg.reply(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ¬´{scene}¬ª –Ω–∞ {msg.text}:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("fav|"))
async def cb_fav(cq: types.CallbackQuery):
    _, scene, iso, idx = cq.data.split("|", 3)
    idx = int(idx)
    tstr, artist = get_entries_for_date(scene, iso)[idx]
    uid = str(cq.from_user.id)
    FAVS.setdefault(uid, [])
    entry = {"scene": scene, "time": tstr, "artist": artist, "notified": False}
    if not any(x["scene"]==scene and x["time"]==tstr for x in FAVS[uid]):
        FAVS[uid].append(entry)
        save_json(FAVS_FILE, FAVS)
        await bot.answer_callback_query(cq.id, f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ ¬´{artist}¬ª")
    else:
        await bot.answer_callback_query(cq.id, "‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_back(msg: types.Message):
    await msg.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@dp.message_handler(commands=['add_scene'])
async def cmd_add_scene(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_scene –ù–∞–∑–≤–∞–Ω–∏–µ_—Å—Ü–µ–Ω—ã")
    name = parts[1].strip()
    if name in SCENES:
        return await msg.reply("–¢–∞–∫–∞—è —Å—Ü–µ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    SCENES[name] = []
    save_json(SCENES_FILE, SCENES)
    await msg.reply(f"‚úÖ –°—Ü–µ–Ω–∞ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def reminder_loop():
    while True:
        now = datetime.now()
        changed = False
        for uid, picks in FAVS.items():
            for e in picks:
                if not e["notified"]:
                    et = datetime.fromisoformat(e["time"])
                    delta = (et - now).total_seconds()
                    if 0 < delta <= 15*60:
                        await bot.send_message(int(uid),
                            f"üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç: {e['artist']} ({e['scene']}) –≤ {e['time'][11:16]}"
                        )
                        e["notified"] = True
                        changed = True
        if changed:
            save_json(FAVS_FILE, FAVS)
        await asyncio.sleep(60)

async def on_startup(dp: Dispatcher):
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(reminder_loop())

if __name__ == "__main__":
    executor.start_polling(
        dp,
        skip_updates=True,
        reset_webhook=True,
        on_startup=on_startup
    )

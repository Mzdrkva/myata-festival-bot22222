import os
import json
import asyncio
import time
from datetime import datetime, timedelta, time as dtime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates

# ====== Утилиты для JSON ======
def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False, indent=2)
        return default.copy()

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== Загрузка конфигурации ======
# Убедитесь, что рядом с bot.py есть config.json:
# {
#   "BOT_TOKEN": "<ВАШ_ТОКЕН>",
#   "ADMIN_IDS": [<ID1>, <ID2>]
# }
CONFIG = load_json("config.json", {})
BOT_TOKEN = CONFIG.get("BOT_TOKEN", "")
ADMIN_IDS = CONFIG.get("ADMIN_IDS", [])

bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== Русские названия месяцев ======
MONTH_NAMES = {
    1: "января",   2: "февраля",  3: "марта",
    4: "апреля",   5: "мая",      6: "июня",
    7: "июля",     8: "августа",  9: "сентября",
    10: "октября", 11: "ноября",  12: "декабря",
}

# ====== Файлы данных и ресурсы ======
SCENES_FILE   = "scenes.json"
FAVS_FILE     = "user_data.json"
WELCOME_IMAGE = "welcome.jpg"     # Необходимо разместить рядом с bot.py
MAP_IMAGE     = "map.jpg"         # Файл с картой фестиваля (поместите map.jpg рядом с bot.py)

# ====== Стартовое расписание сцен (если отсутствует scenes.json) ======
DEFAULT_SCENES = {
    "SIRENA": [
        ["2025-06-13 15:00", "SULA FRAY"],
        ["2025-06-13 16:00", "Luverance"],
        ["2025-06-13 17:00", "ГУДТАЙМС"],
        ["2025-06-13 18:00", "Polnalyubvi"],
        ["2025-06-13 19:00", "Заточка"],
        ["2025-06-13 20:00", "TMNV"],
        ["2025-06-13 21:00", "ХЛЕБ"],
        ["2025-06-13 22:40", "Три дня дождя"],
        ["2025-06-14 13:00", "The Translators"],
        ["2025-06-14 14:00", "PALC"],
        ["2025-06-14 15:00", "Beautiful boys"],
        ["2025-06-14 16:00", "3333"],
        ["2025-06-14 17:00", "Драгни"],
        ["2025-06-14 18:00", "Кирпичи Big Band"],
        ["2025-06-14 19:00", "DRUMMATIX"],
        ["2025-06-14 20:00", "Saluki"],
        ["2025-06-14 21:00", "ZOLOTO"],
        ["2025-06-14 22:40", "АРИЯ"],
        ["2025-06-15 12:00", "СмешBand"],
        ["2025-06-15 13:00", "Мультfильмы"],
        ["2025-06-15 14:00", "obraza net"],
        ["2025-06-15 15:00", "Пётр Налич"],
        ["2025-06-15 16:00", "мытищи в огне"],
        ["2025-06-15 17:00", "Базар"],
        ["2025-06-15 18:00", "The Hatters"]
    ],
    "TITANA": [
        ["2025-06-13 16:00", "Baby Cute"],
        ["2025-06-13 16:40", "Пальцева Экспириенс"],
        ["2025-06-13 17:40", "Людмил Огурченко"],
        ["2025-06-13 18:40", "Бюро"],
        ["2025-06-13 19:40", "OLIGARKH"],
        ["2025-06-13 20:40", "Yan Dilan"],
        ["2025-06-13 21:50", "Конец солнечных дней"],
        ["2025-06-14 00:30", "The OM"],
        ["2025-06-14 12:00", "Три Вторых"],
        ["2025-06-14 12:50", "El Mashe"],
        ["2025-06-14 13:40", "Inna Syberia"],
        ["2025-06-14 14:40", "Остыл"],
        ["2025-06-14 15:40", "Manapart"],
        ["2025-06-14 16:40", "Juzeppe Junior"],
        ["2025-06-14 17:40", "Манго буст"],
        ["2025-06-14 18:40", "Хмыров"],
        ["2025-06-14 19:40", "Стрио"],
        ["2025-06-14 20:40", "Молодость внутри"],
        ["2025-06-14 21:50", "Лолита косс"],
        ["2025-06-15 00:30", "Бонд с кнопкой"],
        ["2025-06-15 12:20", "Хохма"],
        ["2025-06-15 13:20", "Cardio killer"],
        ["2025-06-15 14:20", "Можем хуже"],
        ["2025-06-15 15:20", "Breaking system"],
        ["2025-06-15 16:20", "Stigmata"],
        ["2025-06-15 17:20", "Jane air"]
    ],
    "Маяк": [
        ["2025-06-13 15:20", "HIDeout"],
        ["2025-06-13 16:20", "Rofman"],
        ["2025-06-13 17:20", "Koledova"],
        ["2025-06-13 18:20", "Без обид"],
        ["2025-06-13 19:20", "Антон прокофьев"],
        ["2025-06-13 20:20", "Синдром главного героя"],
        ["2025-06-13 21:50", "собачий lie"],
        ["2025-06-14 12:20", "tabasco band"],
        ["2025-06-14 13:20", "мама не узнает"],
        ["2025-06-14 14:20", "brodsky"],
        ["2025-06-14 15:20", "lithium"],
        ["2025-06-14 16:20", "Дедовский свитер"],
        ["2025-06-14 17:20", "Давай"],
        ["2025-06-14 18:20", "Uncle pecos"],
        ["2025-06-14 19:20", "Rasputniki"],
        ["2025-06-14 20:20", "Melekess"],
        ["2025-06-14 21:50", "Monolyt (IL)"],
        ["2025-06-15 11:40", "Mazzltoff"],
        ["2025-06-15 12:40", "Дисциплина безбольной биты"],
        ["2025-06-15 13:40", "Ник брусковский"],
        ["2025-06-15 14:40", "Рубеж веков"],
        ["2025-06-15 15:40", "Каспий"],
        ["2025-06-15 16:40", "kamilla robertovna"]
    ],
    "Дачный клуб Т-Банк": [
        ["2025-06-13 13:00", "Costa Dorada"],
        ["2025-06-13 15:00", "Крими Край"],
        ["2025-06-13 17:00", "Я Софа"],
        ["2025-06-13 19:00", "Nice City"],
        ["2025-06-13 21:00", "Runa Project"],
        ["2025-06-13 22:00", "соня хочет танцевать"],
        ["2025-06-13 02:00", "Breakpillzz"],
        ["2025-06-14 13:00", "Летяга"],
        ["2025-06-14 15:00", "Клуб 33"],
        ["2025-06-14 17:00", "Polina Offline"],
        ["2025-06-14 19:00", "КОМНАТА105"],
        ["2025-06-14 21:00", "не вижу"],
        ["2025-06-14 22:00", "SHAMAN IVAN"],
        ["2025-06-14 00:00", "Ielele"],
        ["2025-06-14 02:00", "ParadigmA"],
        ["2025-06-15 13:00", "Пилс"],
        ["2025-06-15 15:00", "Гнев господень"],
        ["2025-06-15 17:00", "Лучший самый день"],
        ["2025-06-15 20:00", "Gokk’n’Tony"]
    ],
    "Амбар «ARTИСТ»": [
        ["2025-06-13 23:00", "Lowriderz"],
        ["2025-06-13 23:00", "Despersion"],
        ["2025-06-13 23:00", "Impish"],
        ["2025-06-13 23:00", "Ryan Audley"],
        ["2025-06-13 23:00", "Matyo"],
        ["2025-06-14 23:00", "ТРАВМА"],
        ["2025-06-14 23:00", "Lion (SLK)"],
        ["2025-06-14 23:00", "UNKNOWN ARTISTS"]
    ],
    "VASHANA АРЕНА": [
        ["2025-06-13 11:30", "DJ PERETSE"],
        ["2025-06-13 12:00", "DJ-сеты"],
        ["2025-06-13 17:00", "LIRA"],
        ["2025-06-13 17:30", "DJ-сеты"],
        ["2025-06-13 22:00", "SAINT RIDER"],
        ["2025-06-13 23:00", "DJ FEEL"],
        ["2025-06-14 11:30", "DJ-сет"],
        ["2025-06-14 12:00", "KOROLEV"],
        ["2025-06-14 12:30", "DJ-сеты"],
        ["2025-06-14 16:00", "M.PRAVDA"],
        ["2025-06-14 16:30", "DJ-сеты"],
        ["2025-06-14 18:30", "ANDROID"],
        ["2025-06-14 19:00", "DJ-сеты"],
        ["2025-06-14 22:00", "DJ BOYКО"],
        ["2025-06-14 23:00", "PROFIT"],
        ["2025-06-15 12:00", "SECRET GUEST"],
        ["2025-06-15 12:00", "DJ-сеты"],
        ["2025-06-15 16:30", "SOROKOVA"],
        ["2025-06-15 17:00", "AKS"],
        ["2025-06-15 17:30", "SECRET GUEST"]
    ],
    "Детская сцена Ариэль": [
        ["2025-06-13 14:00", "Скверная Участь"],
        ["2025-06-13 14:15", "Децебелки"],
        ["2025-06-13 14:30", "Атомы"],
        ["2025-06-13 14:45", "Япония"],
        ["2025-06-13 15:00", "Варианты"],
        ["2025-06-13 15:15", "Грозные Завры"],
        ["2025-06-13 15:30", "Хром"],
        ["2025-06-13 15:45", "Послезавтра"],
        ["2025-06-13 16:00", "Меньше Чем Три"],
        ["2025-06-13 16:15", "Искры Безумия"],
        ["2025-06-13 16:30", "Что с лицом?"],
        ["2025-06-13 16:45", "Рок и точка"],
        ["2025-06-13 17:15", "Саша Кучеряша"],
        ["2025-06-13 17:30", "Клондайк"],
        ["2025-06-13 17:45", "По Тормозам"],
        ["2025-06-13 18:00", "Твердый знакЪ"],
        ["2025-06-13 18:15", "AV"],
        ["2025-06-13 18:30", "Мамины Нервы"],
        ["2025-06-13 18:45", "Синдром Дефицита"],
        ["2025-06-13 19:00", "До Вечера"],
        ["2025-06-13 19:15", "Супернова"],
        ["2025-06-13 19:30", "Мы придумаем"],
        ["2025-06-13 19:45", "Электра"],
        ["2025-06-14 10:00", "Тигры"],
        ["2025-06-14 10:15", "ВикоДин"],
        ["2025-06-14 10:30", "Оптимисты синергия"],
        ["2025-06-14 10:45", "Дети Аиста"],
        ["2025-06-14 11:00", "Метроном синергия"],
        ["2025-06-14 11:15", "Тигры"],
        ["2025-06-14 11:30", "Рок-макароны"],
        ["2025-06-14 11:45", "Чикен рок"],
        ["2025-06-14 12:00", "Децебелки"],
        ["2025-06-14 12:15", "Скверная участь"],
        ["2025-06-14 12:30", "Мяу Теоры"],
        ["2025-06-14 12:45", "ДЕТСКОЕ РАДИО — конкурсы"],
        ["2025-06-14 13:15", "Platanos Band"],
        ["2025-06-14 13:45", "Спички"],
        ["2025-06-14 14:15", "Super Детки"],
        ["2025-06-14 15:15", "Bamboo"],
        ["2025-06-14 15:45", "Атомы"],
        ["2025-06-14 16:15", "Bumbles"],
        ["2025-06-14 16:30", "VыSTREL"],
        ["2025-06-14 17:00", "По Тормозам"],
        ["2025-06-14 17:45", "Мила Новак и Сергей Зауэрс"],
        ["2025-06-14 18:00", "Чудо"],
        ["2025-06-14 18:15", "Подарочки"],
        ["2025-06-14 18:30", "Япония"],
        ["2025-06-14 18:45", "Острые углы"],
        ["2025-06-14 19:00", "Metal Forest"],
        ["2025-06-14 19:15", "Inflorescence"],
        ["2025-06-15 10:30", "Супернова"],
        ["2025-06-15 10:45", "Электра"],
        ["2025-06-15 11:00", "Скверная участь"],
        ["2025-06-15 11:15", "Деловой Вопрос"],
        ["2025-06-15 11:30", "Пылинки синергия"],
        ["2025-06-15 11:45", "Ядерные Осадки"],
        ["2025-06-15 12:00", "Самонаводяшие Собаки"],
        ["2025-06-15 12:15", "3000 причин синергия"],
        ["2025-06-15 13:00", "Атмосфера BM"],
        ["2025-06-15 13:15", "Grass-hoppers"],
        ["2025-06-15 13:30", "Рок-Мотор"],
        ["2025-06-15 13:45", "Электрочайник"],
        ["2025-06-15 14:00", "Sound Waves"],
        ["2025-06-15 14:15", "Forgotten years"],
        ["2025-06-15 14:30", "Меланхолия под кожей"],
        ["2025-06-15 14:45", "Казантип"],
        ["2025-06-15 15:00", "Спаркс"],
        ["2025-06-15 15:15", "Поколение"],
        ["2025-06-15 15:30", "Атомы"],
        ["2025-06-15 15:45", "Япония"],
        ["2025-06-15 16:00", "Metallforest"],
        ["2025-06-15 16:15", "Чикен рок"],
        ["2025-06-15 16:30", "Викодин"]
      ]
}

SCENES = load_json(SCENES_FILE, DEFAULT_SCENES)
FAVS   = load_json(FAVS_FILE, {})

user_context = {}

# ====== Клавиатуры ======
def main_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("Открытие дверей", "Обмен билетов")
    kb.row("Расписание Сцен", "⭐ Избранное")
    kb.row("Инфоцентр / Касса / Камеры хранения", "Душевые и зоны кипятка")
    kb.row("Карта фестиваля", "Развлечения на фестивале")
    kb.row("FAQ")
    return kb

def schedule_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    names = list(SCENES.keys())
    for i in range(0, len(names), 2):
        kb.row(*(KeyboardButton(n) for n in names[i:i+2]))
    kb.row("◀️ Главное меню")
    return kb

def date_menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("13 июня", "14 июня", "15 июня")
    kb.row("◀️ Главное меню")
    return kb

def faq_kb():
    opts = [
        "Когда и где проходит фестиваль", "Правила фестиваля",
        "Животные на фестивале", "Расписание выступлений, карта фестиваля",
        "Как доехать до фестиваля, трансферы на фестиваль", "Можно ли заехать на фестиваль заранее?",
        "Можно ли взять с собой фотоаппарат или видеокамеру на фестиваль?", "Инфоцентр",
        "Социальные скидки", "Дети до 6-ти лет — нужен ли билет?",
        "Билеты на 1 и 2 дня", "Парковка",
        "Место под палатку", "Аренда палатки в готовом кемпинге",
        "Удобства на фестивале", "Продукты питания на фестивале",
        "Кипяток на фестивале", "Костры и газовые горелки",
        "Первая помощь и медикаменты", "Курение и алкоголь"
    ]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(opts), 2):
        row = opts[i:i+2]
        kb.row(*(KeyboardButton(o) for o in row))
    kb.row("◀️ Главное меню")
    return kb

# ====== Тексты разделов и FAQ ======
FAQ_TEXTS = {
    "Открытие дверей": (
        "Открытие дверей фестиваля.\n\n"
        "Заезд — с 18:00 12 июня. В этот день можно будет обменять билеты на браслеты, "
        "разместиться в палаточных кемпингах, пользоваться водой, душами и туалетами, "
        "будет открыта парковка и часть ресторанов и кафе.\n\n"
        "Программа фестиваля — 13-15 июня.\n\n"
        "Вход по билетам на 2 дня (14-15 июня) и 1 день (15 июня) — начиная с 9:00 утра 14 и 15 июня."
    ),
    "Обмен билетов": (
        "Расписание работы групп обмена билетов на браслеты:\n\n"
        "Главный вход:\n"
        "12 июня: 18:00 — 00:30\n"
        "13 июня: 10:00 — 00:30\n"
        "14 июня: 10:00 — 23:00\n"
        "15 июня: 10:00 — 17:00\n\n"
        "Вход со стороны парковки:\n"
        "С 12 июня, 18:00 — по 13 июня, 23:59 (без перерывов)\n"
        "14 июня: 10:00 — 23:00\n"
        "15 июня: 10:00 — 17:00\n\n"
        "Парковка:\n"
        "С 12 июня, 18:00 — по 15 июня, 18:00 (без перерывов)\n\n"
        "ДЛЯ ГОСТЕЙ С БРАСЛЕТАМИ ВХОД — ВЫХОД С ТЕРРИТОРИИ ФЕСТИВАЛЯ — КРУГЛОСУТОЧНЫЙ."
    ),
    "Инфоцентр / Касса / Камеры хранения": (
        "КАМЕРЫ ХРАНЕНИЯ:\n"
        "Четверг с 16:00 до 01:00\n"
        "Пятница с 08:00 до 01:00\n"
        "Суббота с 08:00 до 01:00\n"
        "Воскресенье с 08:00 до 21:00\n\n"
        "ИНФОЦЕНТР:\n"
        "Четверг с 16:00 до 00:00\n"
        "Пятница с 08:00 до 00:00\n"
        "Суббота с 08:00 до 00:00\n"
        "Воскресенье с 08:00 до 21:00\n\n"
        "КАССЫ:\n"
        "Четверг с 16:00 до 22:00\n"
        "Пятница с 10:00 до 22:00\n"
        "Суббота с 10:00 до 22:00\n"
        "Воскресенье с 10:00 до 17:00"
    ),
    "Душевые и зоны кипятка": (
        "КИПЯТОК:\n"
        "Четверг 19:00 — 22:00\n\n"
        "Пятница | Суббота | Воскресенье:\n"
        "8:00 — 11:00\n"
        "13:00 — 15:00\n"
        "19:00 — 22:00\n\n"
        "ДУШЕВЫЕ КОМНАТЫ:\n\n"
        "Четверг:\n"
        "ГОСТИ ФЕСТИВАЛЯ: 20:00 — 22:00\n"
        "СОТРУДНИКИ ФЕСТИВАЛЯ: 22:00 — 00:00\n\n"
        "Пятница | Суббота | Воскресенье:\n"
        "ГОСТИ ФЕСТИВАЛЯ: 8:00 — 11:00\n"
        "12:00 — 14:00\n"
        "16:00 — 19:00\n"
        "СОТРУДНИКИ ФЕСТИВАЛЯ: 07:00 — 08:00\n"
        "20:00 — 22:00\n\n"
        "Посещения душевых комнат и точек с кипятком — в порядке живой очереди. БЕСПЛАТНО."
    ),
    "Карта фестиваля": None,  # Обработается отдельно (отправка картинки)
    "Развлечения на фестивале": (
        "• Ярмарки и фудкорт.\n"
        "• Территория красоты и здоровья Green Age, где проходит йога, практики, медитации:\n"
        "  https://mintmusic.ru/schedule/greenage\n"
        "• Территория детства: мастер-классы, детский сад, батуты, карусели и другие развлечения для детей:\n"
        "  https://mintmusic.ru/children\n"
        "• Сплавы на фестивале по рекам Ока и Вашана: байдарки и сап-борды:\n"
        "  https://mintmusic.ru/splav2025\n"
        "• Спорт-площадки.\n"
        "• Beauty zone: ваши фестивальные прически, мэйк-ап, блестки, барбершоп, де-дреды и т.д.:\n"
        "  https://mintmusic.ru/beautyzone"
    ),
    "Когда и где проходит фестиваль": (
        "Программа фестиваля — 13−15 июня.\n"
        "Заезд — 18:00 12 июня. В этот день можно будет обменять билеты на браслеты, "
        "разместиться в палаточных кемпингах, пользоваться водой, душами и туалетами, "
        "будет открыта парковка и часть ресторанов и кафе.\n\n"
        "Место проведения фестиваля «Дикая Мята»: Тульская обл., Алексинский р-н, пос. Бунырево.\n"
        "Расстояние от Москвы (МКАД) — 130 км, от Калуги — 100 км, от Тулы — 70 км.\n"
        "Координаты: 54.582 650, 37.167 454"
    ),
    "Правила фестиваля": (
        "Всё о билетах, обмене билетов на браслеты, парковке и палаточном лагере, "
        "что можно взять с собой, список разрешенных к проносу продуктов, "
        "другие правила и ограничения на фестивале, можно узнать в разделе «Правила фестиваля» на сайте."
    ),
    "Животные на фестивале": "Посещение фестиваля с любыми животными запрещено.",
    "Расписание выступлений, карта фестиваля": (
        "Информация о выступлениях по дням появится примерно за 2−4 недели до старта «Дикой Мяты» — "
        "обязательно сообщим информацию в новостях на сайте и в соц.сетях.\n\n"
        "Карту фестиваля можно посмотреть здесь."
    ),
    "Как доехать до фестиваля, трансферы на фестиваль": (
        "Как добраться из Москвы\n"
        "Как добраться из Тулы\n"
        "Как добраться из Калуги\n\n"
        "Трансферы курсируют в дни проведения фестиваля от метро из Москвы и от станции Тарусская "
        "прямо до главного входа «Дикой Мяты» и обратно — информация и старт продаж билетов на трансферы "
        "будут размещены на сайте и в новостях фестиваля ближе к датам проведения."
    ),
    "Можно ли заехать на фестиваль заранее?": "Можно. Специально для желающих гостей фестиваля мы открываем «двери» фестиваля 12 июня 2025 года в 18:00.",
    "Можно ли взять с собой фотоаппарат или видеокамеру на фестиваль?": (
        "Допускается только частная съемка, на любую технику (кроме дронов). "
        "Любая коммерческая съемка запрещена, является незаконной и не допускается к показу в СМИ."
    ),
    "Инфоцентр": (
        "В Инфоцентре вы сможете подзарядить свои гаджеты, воспользоваться бесплатным Wi-Fi, вызвать такси "
        "или с комфортом дождаться отправления автобуса. Команда фестиваля будет рада помочь вам "
        "в случае возникновения любых вопросов."
    ),
    "Социальные скидки": (
        "Фестиваль «Дикая Мята» предоставляет социальные скидки в размере 50% от стоимости билетов "
        "многодетным семьям (распространяется на детей в возрасте до 18 лет и родителей, указанных "
        "в удостоверении или свидетельстве о браке), пенсионерам, ветеранам, людям с инвалидностью.\n"
        "Скидка также распространяется:\n"
        "— На одного сопровождающего для людей с инвалидностью I группы;\n"
        "— На одного взрослого (родитель или опекун) в случае, если ребенок с инвалидностью нуждается в сопровождении.\n\n"
        "Скидка 50% предоставляется от цены, действующей на момент приобретения билетов.\n\n"
        "Информация о предпродаже и продаже социальных билетов будет опубликована на сайте. "
        "Старт предпродажи социальных билетов состоится в апреле 2025 года."
    ),
    "Дети до 6-ти лет — нужен ли билет?": (
        "Дети до 6-ти лет проходят на фестиваль бесплатно с родителями (законными представителями), "
        "билет не нужен.\n\n"
        "На фестивале открыта комната матери и ребенка со всем необходимым, чтобы разогреть детское питание, "
        "пообедать за удобным столом, постирать и высушить одежду, вы найдете пеленальные столики с лампами обогрева, "
        "собственный душ с горячей водой и раковины. Доступ свободный.\n\n"
        "Для гостей с детьми предусмотрен отдельный палаточный лагерь «Семейный» — он расположен дальше от сцен, "
        "а соседи по палаткам стараются не шуметь в позднее время. Выбрать «Семейный» лагерь и место в нем можно при покупке билета «Место под палатку».\n\n"
        "Если ребенку на момент проведения фестиваля исполняется 6 лет, то необходимо приобрести Детский билет "
        "(от 6 до 12 лет включительно), старше 13-ти лет — Взрослый билет."
    ),
    "Билеты на 1 и 2 дня": (
        "Наши входные билеты доступны для покупки на сайте:\n"
        "Взрослый Абонемент — на все 4 дня фестиваля\n\n"
        "Билеты на 1 и 2 дня появятся в продаже в июне 2025 года:\n"
        "— Взрослый билет на 2 дня (14 — 15 июня)\n"
        "— Взрослый билет на 1 день (15 июня)"
    ),
    "Парковка": (
        "На территории фестиваля работает платная парковка.\n"
        "Купить билет категорий «Место на парковке для легкового авто», «Место для мотоцикла», "
        "«Место на парковке для крупногабаритного транспорта (автодома)» можно на сайте фестиваля.\n\n"
        "При въезде билет обменивается на наклейку, которую необходимо разместить на лобовом стекле вашего автомобиля. "
        "Данная наклейка позволяет вам выезжать и заезжать на парковку неограниченное количество раз все дни фестиваля.\n\n"
        "На парковке круглосуточно будут дежурить пикапы от «Т-Страхования», которые бесплатно помогут накачать колеса, "
        "зарядить аккумулятор, подвезти топливо и, в случае необходимости, правильно оформить ДТП и зафиксировать все детали для страховой компании.\n\n"
        "Установка палаток на территории парковки запрещена!\n"
        "— Туристические, кемпинговые, дорожные, портативные душевые, туалеты и мини-туалеты запрещены на всей территории фестиваля, в палаточных кемпингах и на парковке."
    ),
    "Место под палатку": (
        "На территории фестиваля открыты несколько палаточных лагерей, а билеты «Место под палатку» продаются по местам — вы заранее выбираете ряд (улицу) и место для своей палатки на сайте:\n\n"
        "• Кемпинг «Семейный» (верхнее поле, расположение справа от главного входа, ближе к парковке)\n"
        "• Кемпинг «Маяк» (верхнее поле, расположение напротив сцены «Маяк»)\n"
        "• Кемпинг «Меломан» (нижнее поле)\n\n"
        "Купить место под палатку.\n\n"
        "Билет категории «Место под палатку» дает право установки своей палатки размером 3×4 м. Место необходимо занять строго в соответствии с номерами ряда и места в выбранном лагере — они указываются при оформлении покупки и на самом билете.\n"
        "Если ваша палатка большего размера или вам необходимо место под тент — вы приобретаете два и более билетов категории «Место под палатка», в зависимости от нужной вам площади.\n\n"
        "В каждом лагере будет свой ресепшен, в который можно обращаться по интересующим вас вопросам. На ресепшенах будет работать персонал, который поможет в поиске своего места и получении любой интересующей информации.\n\n"
        "ВНИМАНИЕ!\n"
        "При установке палатки на месте, не соответствующем ряду и номеру места по билету, палатка будет демонтирована.\n"
        "— Туристические, кемпинговые, дорожные, портативные душевые, туалеты и мини-туалеты запрещены на всей территории фестиваля, в палаточных кемпингах и на парковке.\n\n"
        "В каждом ресепшене, помимо персонала палаточного кемпинга, будут присутствовать сотрудники ЧОП.\n\n"
        "Пожалуйста, устанавливайте палатки в соответствии с купленными билетами."
    ),
    "Аренда палатки в готовом кемпинге": (
        "Информация о вариантах размещения и бронировании проживания в готовой палаточной гостинице Caravan появится на сайте ориентировочно в феврале."
    ),
    "Удобства на фестивале": (
        "Фестиваль «Дикая Мята» на сегодняшний день является одним из самых комфортных в России.\n"
        "На территории фестивального кемпинга вы найдете ресепшн, бесплатные душевые кабины, уборные, умывальники, питьевые фонтанчики, места для зарядки гаджетов и многое другое."
    ),
    "Продукты питания на фестивале": (
        "На территории фестиваля будет работать более 50 ресторанов и фудтраков, в том числе вегетарианские кафе. Следите за обновлениями на нашем сайте и в соцсетях — мы обязательно расскажем об участниках нашего фудкорта.\n\n"
        "Разрешенные продукты:\n"
        "— Заварные каши и лапша;\n"
        "— Сыровяленое мясо и колбасы;\n"
        "— Печенье, крекеры, сухарики, хлебцы;\n"
        "— Детское питание;\n"
        "— Сухофрукты и орехи;\n"
        "— Фрукты и овощи.\n\n"
        "Запрещенные к проносу продукты:\n"
        "— Любые напитки, в том числе алкогольные (в любой таре, включая заводские упаковки). На фестивале функционируют фонтанчики с бесплатной питьевой водой;\n"
        "— Скоропортящиеся продукты питания и продукты в опасной упаковке;\n"
        "— Любые консервированные продукты в металлических и стеклянных банках, полуфабрикаты, мягкие (вареные) колбасы, маринованное, варено-копченое мясо, любая рыба и т. п."
    ),
    "Кипяток на фестивале": (
        "На территории фестиваля вам будет доступен бесплатный кипяток от нашего водного партнера, компании «Барьер». Вы сможете найти места с водой от «Барьера» в буклете фестиваля."
    ),
    "Костры и газовые горелки": (
        "Мы очень ответственно относимся к обеспечению пожарной безопасности на фестивале, поэтому разведение костров на фестивале, пронос любых воспламеняющихся устройств на территорию «Дикой Мяты», включая все палаточные кемпинги и парковку, категорически запрещены.\n"
        "Газовые горелки на территории опен-эйров запрещены законодательством РФ. Надеемся на ваше понимание."
    ),
    "Первая помощь и медикаменты": (
        "Как и в предыдущие годы, на фестивале будут организованы пункты оказания первой помощи и дежурная карета скорой помощи.\n\n"
        "Средства первой помощи (анальгин, активированный уголь и т. п.) допускаются только в закрытых заводских упаковках, все остальные лекарственные средства допустимы только при наличии рецепта."
    ),
    "Курение и алкоголь": (
        "На территории фестиваля запрещено курение и распитие алкогольных напитков, за исключением специально отведенных для этого мест с возрастным ограничением 18+."
    )
}

# ====== Вспомогательная функция: получить расписание по дате ======
def get_entries_for_date(scene: str, iso_date: str):
    date_dt = datetime.fromisoformat(f"{iso_date} 00:00")
    next_dt = date_dt + timedelta(days=1)
    result = []
    for tstr, artist in SCENES.get(scene, []):
        dt = datetime.fromisoformat(tstr)
        # Если артист выступает после полуночи (до 02:00), относим к предыдущему дню
        if dt.date() == date_dt.date() or (dt.date() == next_dt.date() and dt.time() < dtime(2, 0)):
            result.append((tstr, artist))
    return result

# ====== Фоновая задача: проверка избранного и отправка уведомлений ======
async def reminder_loop():
    while True:
        now = datetime.now()
        updated = False
        for uid, picks in FAVS.items():
            for e in picks:
                if not e.get("notified", False):
                    perf_dt = datetime.fromisoformat(e["time"])
                    if perf_dt.time() < dtime(2, 0):
                        perf_dt -= timedelta(days=1)
                    delta = (perf_dt - now).total_seconds()
                    if 0 < delta <= 15 * 60:
                        await bot.send_message(
                            int(uid),
                            f"🔔 Через 15 минут: {e['artist']} ({e['scene']}) в {perf_dt.strftime('%H:%M')}"
                        )
                        e["notified"] = True
                        updated = True
        if updated:
            save_json(FAVS_FILE, FAVS)
        await asyncio.sleep(60)

# ====== Хэндлеры ======

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    uid = str(msg.from_user.id)
    FAVS.setdefault(uid, [])
    save_json(FAVS_FILE, FAVS)

    welcome = (
        "🌿 Мята 2025 — три дня музыки, природы и перезагрузки. 🎶🔥\n\n"
        "🤖 С этим ботом ты можешь:\n"
        "– выбирать любимые выступления\n"
        "– смотреть расписание по сценам и датам\n"
        "– получать напоминания за 15 минут до старта\n"
        "– просматривать ответы на часто задаваемые вопросы"
    )
    with open(WELCOME_IMAGE, "rb") as photo:
        await bot.send_photo(
            chat_id=msg.chat.id,
            photo=photo,
            caption=welcome,
            reply_markup=main_menu_kb()
        )

@dp.message_handler(lambda m: m.text == "Открытие дверей")
async def info_open_doors(msg: types.Message):
    text = FAQ_TEXTS["Открытие дверей"]
    await msg.reply(text, reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "Обмен билетов")
async def info_ticket_exchange(msg: types.Message):
    text = FAQ_TEXTS["Обмен билетов"]
    await msg.reply(text, reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "Инфоцентр / Касса / Камеры хранения")
async def info_info_center(msg: types.Message):
    text = FAQ_TEXTS["Инфоцентр / Касса / Камеры хранения"]
    await msg.reply(text, reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "Душевые и зоны кипятка")
async def info_showers_boiling(msg: types.Message):
    text = FAQ_TEXTS["Душевые и зоны кипятка"]
    await msg.reply(text, reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "Карта фестиваля")
async def info_map(msg: types.Message):
    with open(MAP_IMAGE, "rb") as photo:
        await bot.send_photo(
            chat_id=msg.chat.id,
            photo=photo,
            caption="Карта фестиваля «Дикая Мята 2025»",
            reply_markup=main_menu_kb()
        )

@dp.message_handler(lambda m: m.text == "Развлечения на фестивале")
async def info_entertainment(msg: types.Message):
    text = FAQ_TEXTS["Развлечения на фестивале"]
    await msg.reply(text, reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == "FAQ")
async def cmd_faq(msg: types.Message):
    await msg.reply("❓ FAQ — выберите тему:", reply_markup=faq_kb())

@dp.message_handler(lambda m: m.text in FAQ_TEXTS and m.text not in [
    "Открытие дверей",
    "Обмен билетов",
    "Инфоцентр / Касса / Камеры хранения",
    "Душевые и зоны кипятка",
    "Карта фестиваля",
    "Развлечения на фестивале"
])
async def faq_answer(msg: types.Message):
    text = FAQ_TEXTS[msg.text]
    await msg.reply(text, reply_markup=faq_kb())

@dp.message_handler(lambda m: m.text == "Расписание Сцен")
async def cmd_schedule(msg: types.Message):
    await msg.reply("📆 Выберите сцену:", reply_markup=schedule_menu_kb())

@dp.message_handler(lambda m: m.text == "⭐ Избранное")
async def cmd_favs(msg: types.Message):
    uid = str(msg.from_user.id)
    picks = FAVS.get(uid, [])
    if not picks:
        return await msg.reply("У вас нет избранного.", reply_markup=main_menu_kb())
    lines = []
    for e in sorted(picks, key=lambda x: x["time"]):
        dt = datetime.fromisoformat(e["time"])
        date = f"{dt.day} {MONTH_NAMES[dt.month]}"
        tm   = dt.strftime("%H:%M")
        lines.append(f"{date} в {tm} | {e['scene']} | {e['artist']}")
    await msg.reply("📋 Ваше избранное:\n" + "\n".join(lines), reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text in SCENES)
async def cmd_choose_scene(msg: types.Message):
    user_context[msg.from_user.id] = msg.text
    await msg.reply(f"Сцена «{msg.text}» выбрана. Выберите дату:", reply_markup=date_menu_kb())

@dp.message_handler(lambda m: m.text in ["13 июня", "14 июня", "15 июня"])
async def cmd_choose_date(msg: types.Message):
    scene = user_context.get(msg.from_user.id)
    if not scene:
        return await msg.reply("Сначала выберите сцену.", reply_markup=schedule_menu_kb())
    day = int(msg.text.split()[0])
    iso = f"2025-06-{day:02d}"
    entries = get_entries_for_date(scene, iso)
    if not entries:
        return await msg.reply("На эту дату нет выступлений.", reply_markup=schedule_menu_kb())
    kb = InlineKeyboardMarkup(row_width=1)
    for idx, (tstr, artist) in enumerate(entries):
        kb.add(InlineKeyboardButton(f"{tstr[11:16]} — {artist}", callback_data=f"fav|{scene}|{iso}|{idx}"))
    await msg.reply(f"Расписание «{scene}» на {msg.text}:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("fav|"))
async def cb_fav(cq: types.CallbackQuery):
    _, scene, iso, idx = cq.data.split("|", 3)
    idx = int(idx)
    tstr, artist = get_entries_for_date(scene, iso)[idx]
    uid = str(cq.from_user.id)
    FAVS.setdefault(uid, [])
    entry = {"scene": scene, "time": tstr, "artist": artist, "notified": False}
    if not any(x["scene"] == scene and x["time"] == tstr for x in FAVS[uid]):
        FAVS[uid].append(entry)
        save_json(FAVS_FILE, FAVS)
        await bot.answer_callback_query(cq.id, f"⭐ Добавлено «{artist}»")
    else:
        await bot.answer_callback_query(cq.id, "✅ Уже в избранном")

@dp.message_handler(lambda m: m.text == "◀️ Главное меню")
async def cmd_back(msg: types.Message):
    await msg.reply("Главное меню:", reply_markup=main_menu_kb())

# ====== Админ-команды ======
@dp.message_handler(commands=['add_scene'])
async def cmd_add_scene(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply("Используйте: /add_scene Название_сцены")
    name = parts[1].strip()
    if name in SCENES:
        return await msg.reply("Такая сцена уже существует.")
    SCENES[name] = []
    save_json(SCENES_FILE, SCENES)
    await msg.reply(f"✅ Сцена «{name}» добавлена.")

@dp.message_handler(commands=['remove_scene'])
async def cmd_remove_scene(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply("Используйте: /remove_scene Название_сцены")
    name = parts[1].strip()
    if name not in SCENES:
        return await msg.reply(f"Сцена «{name}» не найдена.")
    del SCENES[name]
    save_json(SCENES_FILE, SCENES)
    await msg.reply(f"✅ Сцена «{name}» удалена.")

@dp.message_handler(commands=['add_perf'])
async def cmd_add_perf(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    try:
        _, payload = msg.text.split(maxsplit=1)
        scene, dt_str, artist = [s.strip() for s in payload.split('|', 2)]
    except ValueError:
        return await msg.reply(
            "Использование:\n"
            "/add_perf Сцена|YYYY-MM-DD HH:MM|Имя артиста"
        )
    if scene not in SCENES:
        return await msg.reply(f"Сцена «{scene}» не найдена.")
    SCENES[scene].append([dt_str, artist])
    save_json(SCENES_FILE, SCENES)
    await msg.reply(f"✅ Добавлено в «{scene}»: {dt_str} — {artist}")

@dp.message_handler(commands=['remove_perf'])
async def cmd_remove_perf(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    try:
        _, payload = msg.text.split(maxsplit=1)
        scene, dt_str, artist = [s.strip() for s in payload.split('|', 2)]
    except ValueError:
        return await msg.reply(
            "Использование:\n"
            "/remove_perf Сцена|YYYY-MM-DD HH:MM|Имя артиста"
        )
    if scene not in SCENES:
        return await msg.reply(f"Сцена «{scene}» не найдена.")
    entry = [dt_str, artist]
    if entry not in SCENES[scene]:
        return await msg.reply("Такого выступления нет.")
    SCENES[scene].remove(entry)
    save_json(SCENES_FILE, SCENES)
    await msg.reply(f"✅ Удалено из «{scene}»: {dt_str} — {artist}")

@dp.message_handler(commands=['broadcast'])
async def cmd_broadcast(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply("Использование: /broadcast Текст сообщения")
    text = parts[1].strip()
    count = 0
    for uid in FAVS.keys():
        try:
            await bot.send_message(int(uid), f"📢 Сообщение от организаторов:\n{text}")
            count += 1
        except:
            pass
    await msg.reply(f"✅ Отправлено сообщений {count} пользователям.")

# ====== Запуск и обработка конфликтов ======
async def on_startup(dp: Dispatcher):
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(reminder_loop())

if __name__ == "__main__":
    while True:
        try:
            executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
            break
        except TerminatedByOtherGetUpdates:
            asyncio.get_event_loop().run_until_complete(
                bot.delete_webhook(drop_pending_updates=True)
            )
            time.sleep(1)

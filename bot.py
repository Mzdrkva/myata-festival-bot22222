import os
import json
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "user_data.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω ======
SCENES = {
    "SIRENA": [
        ("2025-06-13 15:00", "SULA FRAY"),
        ("2025-06-13 16:00", "Luverance"),
        ("2025-06-13 17:00", "–ì–£–î–¢–ê–ô–ú–°"),
        ("2025-06-13 18:00", "Polnalyubvi"),
        ("2025-06-13 19:00", "–ó–∞—Ç–æ—á–∫–∞"),
        ("2025-06-13 20:00", "TMNV"),
        ("2025-06-13 21:00", "–•–õ–ï–ë"),
        ("2025-06-13 22:40", "–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è"),
        ("2025-06-14 13:00", "The Translators"),
        ("2025-06-14 14:00", "PALC"),
        ("2025-06-14 15:00", "Beautiful boys"),
        ("2025-06-14 16:00", "3333"),
        ("2025-06-14 17:00", "–î—Ä–∞–≥–Ω–∏"),
        ("2025-06-14 18:00", "–ö–∏—Ä–ø–∏—á–∏ Big Band"),
        ("2025-06-14 19:00", "DRUMMATIX"),
        ("2025-06-14 20:00", "Saluki"),
        ("2025-06-14 21:00", "ZOLOTO"),
        ("2025-06-14 22:40", "–ê–†–ò–Ø"),
        ("2025-06-15 12:00", "–°–º–µ—àBand"),
        ("2025-06-15 13:00", "–ú—É–ª—å—Çf–∏–ª—å–º—ã"),
        ("2025-06-15 14:00", "obraza net"),
        ("2025-06-15 15:00", "–ü—ë—Ç—Ä –ù–∞–ª–∏—á"),
        ("2025-06-15 16:00", "–º—ã—Ç–∏—â–∏ –≤ –æ–≥–Ω–µ"),
        ("2025-06-15 17:00", "–ë–∞–∑–∞—Ä"),
        ("2025-06-15 18:00", "The Hatters"),
    ],
    "TITANA": [
        ("2025-06-13 16:00", "Baby Cute"),
        ("2025-06-13 16:40", "–ü–∞–ª—å—Ü–µ–≤–∞ –≠–∫—Å–ø–∏—Ä–∏–µ–Ω—Å"),
        ("2025-06-13 17:40", "–õ—é–¥–º–∏–ª –û–≥—É—Ä—á–µ–Ω–∫–æ"),
        ("2025-06-13 18:40", "–ë—é—Ä–æ"),
        ("2025-06-13 19:40", "OLIGARKH"),
        ("2025-06-13 20:40", "Yan Dilan"),
        ("2025-06-13 21:50", "–ö–æ–Ω–µ—Ü —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –¥–Ω–µ–π"),
        ("2025-06-14 00:30", "The OM"),
        ("2025-06-14 12:00", "–¢—Ä–∏ –í—Ç–æ—Ä—ã—Ö"),
        ("2025-06-14 12:50", "El Mashe"),
        ("2025-06-14 13:40", "Inna Syberia"),
        ("2025-06-14 14:40", "–û—Å—Ç—ã–ª"),
        ("2025-06-14 15:40", "Manapart"),
        ("2025-06-14 16:40", "Juzeppe Junior"),
        ("2025-06-14 17:40", "–ú–∞–Ω–≥–æ –±—É—Å—Ç"),
        ("2025-06-14 18:40", "–•–º—ã—Ä–æ–≤"),
        ("2025-06-14 19:40", "–°—Ç—Ä–∏–æ"),
        ("2025-06-14 20:40", "–ú–æ–ª–æ–¥–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏"),
        ("2025-06-14 21:50", "–õ–æ–ª–∏—Ç–∞ –∫–æ—Å—Å"),
        ("2025-06-15 00:30", "–ó–ê–õ–ï–ó"),
        ("2025-06-15 12:20", "–•–æ—Ö–º–∞"),
        ("2025-06-15 13:20", "Cardio killer"),
        ("2025-06-15 14:20", "–ú–æ–∂–µ–º —Ö—É–∂–µ"),
        ("2025-06-15 15:20", "Breaking system"),
        ("2025-06-15 16:20", "Stigmata"),
        ("2025-06-15 17:20", "Jane air"),
    ],
    "–°—Ü–µ–Ω–∞ 3": [], "–°—Ü–µ–Ω–∞ 4": [],
    "–°—Ü–µ–Ω–∞ 5": [], "–°—Ü–µ–Ω–∞ 6": [], "–°—Ü–µ–Ω–∞ 7": [],
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã
user_context = {}

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.row(
    KeyboardButton("SIRENA"),
    KeyboardButton("TITANA"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 3"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 4"),
)
main_kb.row(
    KeyboardButton("–°—Ü–µ–Ω–∞ 5"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 6"),
    KeyboardButton("–°—Ü–µ–Ω–∞ 7"),
    KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
)

date_kb = ReplyKeyboardMarkup(resize_keyboard=True)
date_kb.row(
    KeyboardButton("13 –∏—é–Ω—è"),
    KeyboardButton("14 –∏—é–Ω—è"),
    KeyboardButton("15 –∏—é–Ω—è"),
)
date_kb.row(KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = (
        "üåø –ú—è—Ç–∞ 2025 ‚Äî —Ç—Ä–∏ –¥–Ω—è –º—É–∑—ã–∫–∏, –ø—Ä–∏—Ä–æ–¥—ã –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏. üé∂üî•\n\n"
        "ü§ñ –í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏ ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:"
    )
    await message.reply(text, reply_markup=main_kb)

@dp.message_handler(lambda m: m.text in SCENES)
async def choose_scene(message: types.Message):
    user_context[message.from_user.id] = message.text
    await message.reply(f"‚è≥ –°—Ü–µ–Ω–∞ {message.text} –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:", reply_markup=date_kb)

@dp.message_handler(lambda m: m.text in ["13 –∏—é–Ω—è", "14 –∏—é–Ω—è", "15 –∏—é–Ω—è"])
async def choose_date(message: types.Message):
    scene = user_context.get(message.from_user.id)
    if not scene:
        return await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω—É.", reply_markup=main_kb)
    iso_date = f"2025-06-{int(message.text.split()[0]):02d}"
    entries = [(t,a) for t,a in SCENES[scene] if t.startswith(iso_date)]
    if not entries:
        return await message.reply("–ù–∞ —ç—Ç—É –¥–∞—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.", reply_markup=main_kb)
    kb = InlineKeyboardMarkup(row_width=2)
    for idx, (tstr, artist) in enumerate(entries):
        kb.insert(InlineKeyboardButton(
            f"{tstr[11:16]} ‚Äî {artist}",
            callback_data=f"star|{scene}|{iso_date}|{idx}"
        ))
    await message.reply(f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {scene} –Ω–∞ {message.text}:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user_context.pop(message.from_user.id, None)
    await message.reply("–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: types.Message):
    user_id = str(message.from_user.id)
    picks = load_data().get(user_id, [])
    if not picks:
        return await message.reply("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", reply_markup=main_kb)
    lines = []
    for e in sorted(picks, key=lambda x: x["time"]):
        dt = datetime.fromisoformat(e["time"])
        date_str = dt.strftime("%Y-%m-%d")
        time_str = dt.strftime("%H:%M")
        lines.append(f"{date_str} {time_str} | {e['scene']} | {e['artist']}")
    await message.reply("üìã –¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n" + "\n".join(lines), reply_markup=main_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("star|"))
async def handle_star(callback: types.CallbackQuery):
    _, scene, iso_date, idx_str = callback.data.split("|", 3)
    idx = int(idx_str)
    entries = [(t,a) for t,a in SCENES[scene] if t.startswith(iso_date)]
    time_str, artist = entries[idx]
    user_id = str(callback.from_user.id)
    data = load_data()
    picks = data.get(user_id, [])
    entry = {"scene": scene, "time": time_str, "artist": artist, "notified": False}
    if not any(x["scene"]==scene and x["time"]==time_str for x in picks):
        picks.append(entry)
        data[user_id] = picks
        save_data(data)
        await bot.answer_callback_query(callback.id, f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ: {artist}")
    else:
        await bot.answer_callback_query(callback.id, "‚úÖ –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

# ====== –§–æ–Ω–æ–≤—ã–π —Ç–∞—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ======
async def reminder_loop():
    while True:
        now = datetime.now()
        data = load_data()
        updated = False
        for uid, picks in data.items():
            for entry in picks:
                if not entry["notified"]:
                    event_time = datetime.fromisoformat(entry["time"])
                    delta = (event_time - now).total_seconds()
                    if 0 < delta <= 15*60:
                        await bot.send_message(
                            chat_id=int(uid),
                            text=(
                                f"üîî –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç: {entry['artist']} "
                                f"({entry['scene']}) –≤ {entry['time'][11:16]}"
                            )
                        )
                        entry["notified"] = True
                        updated = True
        if updated:
            save_data(data)
        await asyncio.sleep(60)

# ====== –ó–∞–ø—É—Å–∫ ======
async def on_startup(dp):
    asyncio.create_task(reminder_loop())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

import os
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "user_data.json"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# ====== –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ SIRENA ======
# –§–æ—Ä–º–∞—Ç: "YYYY-MM-DD HH:MM" ‚Äî –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
SIRENA_SCHEDULE = [
    # 13 –∏—é–Ω—è (–ø—è—Ç–Ω–∏—Ü–∞)
    ("2025-06-13 15:00", "SULA FRAY"),
    ("2025-06-13 16:00", "Luverance"),
    ("2025-06-13 17:00", "–ì–£–î–¢–ê–ô–ú–°"),
    ("2025-06-13 18:00", "Polnalyubvi"),
    ("2025-06-13 19:00", "–ó–∞—Ç–æ—á–∫–∞"),
    ("2025-06-13 20:00", "TMNV"),
    ("2025-06-13 21:00", "–•–õ–ï–ë"),
    ("2025-06-13 22:40", "–¢—Ä–∏ –¥–Ω—è –¥–æ–∂–¥—è"),
    # 14 –∏—é–Ω—è (—Å—É–±–±–æ—Ç–∞)
    ("2025-06-14 13:00", "The Translators"),
    ("2025-06-14 14:00", "PALC"),
    ("2025-06-14 15:00", "Beautiful boys"),
    ("2025-06-14 16:00", "3333"),
    ("2025-06-14 17:00", "–î—Ä–∞–≥–Ω–∏"),
    ("2025-06-14 18:00", "–ö–∏—Ä–ø–∏—á–∏ Big Band"),
    ("2025-06-14 19:00", "DRUMMATIX"),
    ("2025-06-14 20:00", "Saluki"),
    ("2025-06-14 21:00", "ZOLOTO"),
    ("2025-06-14 22:40", "–ê–†–ò–Ø"),
    # 15 –∏—é–Ω—è (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    ("2025-06-15 12:00", "–°–º–µ—àBand"),
    ("2025-06-15 13:00", "–ú—É–ª—å—Çf–∏–ª—å–º—ã"),
    ("2025-06-15 14:00", "obraza net"),
    ("2025-06-15 15:00", "–ü—ë—Ç—Ä –ù–∞–ª–∏—á"),
    ("2025-06-15 16:00", "–º—ã—Ç–∏—â–∏ –≤ –æ–≥–Ω–µ"),
    ("2025-06-15 17:00", "–ë–∞–∑–∞—Ä"),
    ("2025-06-15 18:00", "The Hatters"),
]

# ====== –£—Ç–∏–ª–∏—Ç—ã: –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ======
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = (
        "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ü–µ–Ω—É SIRENA!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/schedule ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/mypick ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω\n"
        "\n–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ /schedule"
    )
    await message.reply(text)

@dp.message_handler(commands=['schedule'])
async def cmd_schedule(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=1)
    for time_str, artist in SIRENA_SCHEDULE:
        btn = InlineKeyboardButton(
            text=f"{time_str[11:16]} ‚Äî {artist}",
            callback_data=f"star|{time_str}|{artist}"
        )
        kb.insert(btn)
    await message.reply("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ SIRENA:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("star|"))
async def handle_star(callback_query: types.CallbackQuery):
    _, time_str, artist = callback_query.data.split("|", 2)
    user_id = str(callback_query.from_user.id)
    data = load_data()
    picks = data.get(user_id, [])
    entry = {"time": time_str, "artist": artist}
    if entry not in picks:
        picks.append(entry)
        data[user_id] = picks
        save_data(data)
        await bot.answer_callback_query(callback_query.id, text=f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π –ø–ª–∞–Ω: {artist}")
    else:
        await bot.answer_callback_query(callback_query.id, text=f"–£–∂–µ –≤ —Ç–≤–æ—ë–º –ø–ª–∞–Ω–µ: {artist}")

@dp.message_handler(commands=['mypick'])
async def cmd_mypick(message: types.Message):
    user_id = str(message.from_user.id)
    data = load_data()
    picks = data.get(user_id, [])
    if not picks:
        await message.reply("–¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞. –ù–∞–ø–∏—à–∏ /schedule")
        return
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    picks_sorted = sorted(picks, key=lambda e: e["time"])
    lines = [f"{e['time'][11:16]} ‚Äî {e['artist']}" for e in picks_sorted]
    await message.reply("üìã –¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ SIRENA:\n" + "\n".join(lines))

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
